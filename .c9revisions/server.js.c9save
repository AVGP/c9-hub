{"ts":1395697710205,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , workspace = require('./routes/workspace')\n  , fs = require('fs')\n  , path = require('path')\n  , http = require('http')\n  , https = require('https')\n  , path = require('path')\n  , passport = require('passport')\n  , GithubStrategy = require('passport-github').Strategy;\ntry {\n  var config = require(__dirname + '/config.js');\n} catch(e) {\n  console.error(\"No config.js found! Copy and edit config.example.js to config.js!\");\n  process.exit(1);\n}\n\nvar app = express();\n\nvar nextFreeWorkspacePort = 5000;\n\n// all environments\napp.set('port', 3000);\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\napp.set('baseUrl', config.BASE_URL);\napp.set('runningWorkspaces', {});\n\n//Auth\npassport.use(new GithubStrategy({\n    clientID: config.GITHUB_CLIENT_ID,\n    clientSecret: config.GITHUB_CLIENT_SECRET,\n    callbackURL: app.get('baseUrl') + ':' + app.get('port') + '/auth/github/callback'\n  },\n  function(accessToken, refreshToken, profile, done) {\n    var username = path.basename(profile.username.toLowerCase());\n    if(!fs.existsSync(__dirname + '/workspaces/' + path.basename(username))) {\n      if(config.PERMITTED_USERS !== false && config.PERMITTED_USERS.indexOf(username)) return done('Sorry, not allowed :(', null);\n\n      //Okay, that is slightly unintuitive: fs.mkdirSync returns \"undefined\", when successful..\n      if(fs.mkdirSync(__dirname + '/workspaces/' + path.basename(username), '0700') !== undefined) {\n        return done(\"Cannot create user\", null);\n      } else {\n        return done(null, username);\n      }\n    }\n    return done(null, username);\n  }\n));\n\n//Middlewares\napp.use(express.favicon());\napp.use(express.logger('dev'));\napp.use(express.bodyParser());\napp.use(express.methodOverride());\napp.use(express.cookieParser('your secret here'));\napp.use(express.session());\n// Initialize Passport!  Also use passport.session() middleware, to support\n// persistent login sessions (recommended).\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(function(req, res, next) {\n    if(/^\\/workspace\\/[^\\/]+\\/?$/.test(req.path)) {\n        req.nextFreePort = (nextFreeWorkspacePort++);\n        if(nextFreeWorkspacePort > 10000) {\n          nextFreeWorkspacePort = 5000;\n        }\n    }\n    next();\n});\napp.use(app.router);\napp.use(require('stylus').middleware(__dirname + '/public'));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// development only\nif ('development' == app.get('env')) {\n  app.use(express.errorHandler());\n}\n\n//Auth requests\napp.get('/auth/github', passport.authenticate('github'), function(req, res) {});\napp.get('/auth/github/callback',\n  passport.authenticate('github', { failureRedirect: '/'}),\n  function(req, res) {\n    res.redirect('/#/dashboard');\n  });\n\napp.get('/logout', function(req, res){\n  req.logout();\n  res.json('OK');\n});\n// API\napp.get('/workspace', ensureAuthenticated, workspace.list);\napp.post('/workspace', ensureAuthenticated, workspace.create);\napp.get('/workspace/:name', ensureAuthenticated, workspace.run);\napp.post('/workspace/:name/keepalive', ensureAuthenticated, workspace.keepAlive);\napp.delete('/workspace/:name', ensureAuthenticated, workspace.destroy);\n\nvar server;\n\nif (config.SSL && config.SSL.key && config.SSL.cert) {\n  var sslOpts = {\n    key: fs.readFileSync(config.SSL.key),\n    cert: fs.readFileSync(config.SSL.cert)\n  };\n\n  server = https.createServer(sslOpts, app);\n} else {\n  server = http.createServer(app);\n}\n\nserver.listen(app.get('port'), function(){\n  console.log('Express server listening on port ' + app.get('port'));\n});\n\n//Helpers\n\npassport.serializeUser(function(user, done) {\n  done(null, user);\n});\n\npassport.deserializeUser(function(obj, done) {\n  done(null, obj);\n});\n\n\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) { return next(); }\n  res.status(401);\n  res.json({msg: \"Please login first!\"});\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3971}]],"length":3971}
